<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>北斗Battle 内测前福利公告</title>
      <link href="/2022/09/26/Battle_notice/"/>
      <url>/2022/09/26/Battle_notice/</url>
      
        <content type="html"><![CDATA[<h3 id="北斗Battle-志愿者内测前福利公告"><a href="#北斗Battle-志愿者内测前福利公告" class="headerlink" title="北斗Battle 志愿者内测前福利公告"></a>北斗Battle 志愿者内测前福利公告</h3><blockquote><p>每一个志愿者都要有饼姐好友，饼姐会通过我们平台将为你打造唯一限量一份的藏品，用上你们自己的名字进行纪念，并且这个饼姐会找画师给你们一个一个画做到你们独有的唯一的藏品，等我们内测起来就可以的。</p></blockquote><p>符合领取自己藏品的条件：</p><blockquote><p> 第一，群主管理的群一定需要是B群。（C前缀编码为待审核群，要经过审核后才会变成审核通过的B前缀编码的北斗正式群）</p></blockquote><blockquote><p>第二，告诉饼姐你们想要的图的内容，饼姐喊画师给你们一个一个画，给饼姐删了好友的话一定是有原因的，你没做事，这个东西仅此一份在整个平台，志愿者辅助也可以，你们想好名字，大家做事了就有收获只有一份全平台每个人都是画师独特设计</p></blockquote><blockquote><p>第三，下个月国庆期间内测，大家都是北斗的内测玩家，大家有想法可以私聊饼姐，你们要的图名字以及含义以及载体，一定要审核B群！！！饼姐很多人都没有加，要饼姐眼熟你们，饼姐每次说话你都不出来，我们平台不缺钱，缺的是做事的人！！！饼姐一直强调的，实现你们真正唯一性。</p></blockquote><blockquote><p>最后，要管理好自己的群，自己都管理不好，怎么去眼熟你，每天大家相互督促，看到别的群有广告截图出来，人数不够150的，B级将会降为C级</p></blockquote><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3Gitee/d0f570bd7f350657d8f8c466424f002.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 北斗Battle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将项目上传到Gitee</title>
      <link href="/2022/08/31/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Gitee/"/>
      <url>/2022/08/31/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Gitee/</url>
      
        <content type="html"><![CDATA[<h2 id="如何将自己的项目上传到Gitee"><a href="#如何将自己的项目上传到Gitee" class="headerlink" title="如何将自己的项目上传到Gitee"></a>如何将自己的项目上传到Gitee</h2><h3 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h3><ul><li>Git账户</li><li>Gitee账户</li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>我们需要知道Gitee属于一种远程仓库，他需要通过本地仓库上传后，才能推送至Gitee</li></ol><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3Gitee/image-20220831220051073.png" alt="图形化解释"></p><ol start="2"><li>在Gitee上新建一个仓库，获取这个仓库的地址</li><li>在IDEA上新建仓库</li></ol><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3Gitee/image-20220831231223347.png"></p><ol start="4"><li>提交到本地仓库</li></ol><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3Gitee/image-20220831231851912.png"></p><ol start="5"><li>上传到远程仓库</li></ol><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3Gitee/image-20220831232231919.png"></p><ol start="6"><li>最后 commit</li></ol><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3Gitee/image-20220831233223419.png"></p><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3Gitee/image-20220831233541437.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
            <tag> 项目打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云OSS对象存储</title>
      <link href="/2022/08/12/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
      <url>/2022/08/12/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="阿里云OSS对象存储"><a href="#阿里云OSS对象存储" class="headerlink" title="阿里云OSS对象存储"></a>阿里云OSS对象存储</h3><h4 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h4><ol><li>你需要阿里云的id和密钥（这个可以在RAM控制台找到）</li><li>需要有你的服务器地址和bucket的名字</li></ol><p>所以我们需要4个值（keyid，keysecret，endpoint，bucketName）</p><pre class=" language-java"><code class="language-java">aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>file<span class="token punctuation">.</span>endpoint<span class="token operator">=</span>endpointaliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>file<span class="token punctuation">.</span>keyid<span class="token operator">=</span>keyidaliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>file<span class="token punctuation">.</span>keysecret<span class="token operator">=</span>keysecret<span class="token comment" spellcheck="true">// bucket 可以在控制台创建，也可以使用java代码创建</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>file<span class="token punctuation">.</span>bunketname<span class="token operator">=</span>bucketName</code></pre><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        工具类取值</span>        String endPoint <span class="token operator">=</span> ConstantPropertiesUtils<span class="token punctuation">.</span>END_POINT<span class="token punctuation">;</span>        String keyId <span class="token operator">=</span> ConstantPropertiesUtils<span class="token punctuation">.</span>KEY_ID<span class="token punctuation">;</span>        String keySecret <span class="token operator">=</span> ConstantPropertiesUtils<span class="token punctuation">.</span>KEY_SECRET<span class="token punctuation">;</span>        String bucketName <span class="token operator">=</span> ConstantPropertiesUtils<span class="token punctuation">.</span>BUCKET_NAME<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        创建OSSClient实例</span>        OSS ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">,</span> keyId<span class="token punctuation">,</span> keySecret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        上传文件流</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>                InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            获取文件名称</span>            String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String filename <span class="token operator">=</span> uuid <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            调用oss的方法实现上传</span><span class="token comment" spellcheck="true">//            1.Bucket名称</span><span class="token comment" spellcheck="true">//            2.上传到oss文件路径和文件名称 aa/bb/1.jpg     1.jpg（一般写文件名称）</span><span class="token comment" spellcheck="true">//            3.上传文件的输入流</span><span class="token comment" spellcheck="true">//            第二个参数可以按aa/bb/1.jpg</span><span class="token comment" spellcheck="true">//            把文件按照日期进行分类       2019/11/12/1.jpg</span>            String date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            最终拼接</span>            filename <span class="token operator">=</span> date <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>            ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            关闭oss</span>            ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            把上传之后的文件路径返回</span><span class="token comment" spellcheck="true">//            需要把上传到阿里云oss路径手动拼接出来</span><span class="token comment" spellcheck="true">//            https://edu-youyu.oss-cn-beijing.aliyuncs.com/a.jpg</span>            String url <span class="token operator">=</span> <span class="token string">"https://"</span><span class="token operator">+</span>bucketName<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>endPoint<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>filename<span class="token punctuation">;</span>            <span class="token keyword">return</span> url<span class="token punctuation">;</span></code></pre><p><strong>最后我们放回得到的这个路径就是文件&#x2F;图片的具体路径</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> oss </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker概述和常用命令</title>
      <link href="/2022/08/07/docker%E6%A6%82%E8%BF%B0%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/08/07/docker%E6%A6%82%E8%BF%B0%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Docker概述"><a href="#1-Docker概述" class="headerlink" title="1. Docker概述"></a>1. Docker概述</h3><p>(1)基本介绍<br>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），我们用社区版就可以了。官网：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><p>(2)应用场景</p><p>Web 应用的自动化打包和发布。</p><p>自动化测试和持续集成、发布。</p><p>在服务型环境中部署和调整数据库或其他的后台应用。</p><p>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</p><p>(3)Docker 的优势</p><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><p>1、快速，一致地交付您的应用程序。Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</p><p>容器非常适合持续集成和持续交付（CI &#x2F; CD）工作流程，请考虑以下示例方案：</p><p>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。<br>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。<br>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。<br>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。<br>2、响应式部署和扩展<br>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p><p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p><p>3、在同一硬件上运行更多工作负载<br>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p><h3 id="2-Docker的基本组成"><a href="#2-Docker的基本组成" class="headerlink" title="2. Docker的基本组成"></a>2. Docker的基本组成</h3><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/docker%E6%A6%82%E8%BF%B0%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20220807141049417.png" alt="image-20220807141049417"><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/docker%E6%A6%82%E8%BF%B0%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20220807141115359.png" alt="image-20220807141115359"></p><h3 id="3-Docker的安装、启动和卸载"><a href="#3-Docker的安装、启动和卸载" class="headerlink" title="3. Docker的安装、启动和卸载"></a>3. Docker的安装、启动和卸载</h3><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gccyum -y <span class="token function">install</span> gcc-c++<span class="token comment" spellcheck="true"># 1.查看系统的内核：</span><span class="token comment" spellcheck="true">#系统内核版本为3.10.0</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># uname -r</span>3.10.0-957.21.3.el7.x86_64<span class="token comment" spellcheck="true"># 2.查看系统配置</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/os-release</span>NAME<span class="token operator">=</span><span class="token string">"CentOS Linux"</span>VERSION<span class="token operator">=</span><span class="token string">"7 (Core)"</span>ID<span class="token operator">=</span><span class="token string">"centos"</span>ID_LIKE<span class="token operator">=</span><span class="token string">"rhel fedora"</span>VERSION_ID<span class="token operator">=</span><span class="token string">"7"</span>PRETTY_NAME<span class="token operator">=</span><span class="token string">"CentOS Linux 7 (Core)"</span>ANSI_COLOR<span class="token operator">=</span><span class="token string">"0;31"</span>CPE_NAME<span class="token operator">=</span><span class="token string">"cpe:/o:centos:centos:7"</span>HOME_URL<span class="token operator">=</span><span class="token string">"https://www.centos.org/"</span>BUG_REPORT_URL<span class="token operator">=</span><span class="token string">"https://bugs.centos.org/"</span>CENTOS_MANTISBT_PROJECT<span class="token operator">=</span><span class="token string">"CentOS-7"</span>CENTOS_MANTISBT_PROJECT_VERSION<span class="token operator">=</span><span class="token string">"7"</span>REDHAT_SUPPORT_PRODUCT<span class="token operator">=</span><span class="token string">"centos"</span>REDHAT_SUPPORT_PRODUCT_VERSION<span class="token operator">=</span><span class="token string">"7"</span><span class="token comment" spellcheck="true"># 3.卸载旧版本</span>yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span class="token comment" spellcheck="true"># 4.下载需要的安装包</span>yum <span class="token function">install</span> -y yum-utils<span class="token comment" spellcheck="true"># 5.设置镜像的仓库</span>yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo  <span class="token comment" spellcheck="true">#国外的地址</span>        <span class="token comment" spellcheck="true"># 设置阿里云的Docker镜像仓库</span>yum-config-manager \    --add-repo \    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  <span class="token comment" spellcheck="true">#国内的地址</span><span class="token comment" spellcheck="true"># 6.更新yum软件包索引</span>yum makecache fast<span class="token comment" spellcheck="true"># 7.安装docker相关的配置</span><span class="token comment" spellcheck="true"># docker-ce 是社区版，docker-ee 企业版</span> yum <span class="token function">install</span> -y docker-ce docker-ce-cli containerd.io<span class="token comment" spellcheck="true"># 8.启动Docker</span>systemctl start docker<span class="token comment" spellcheck="true"># 查看当前版本号，是否启动成功</span>docker version<span class="token comment" spellcheck="true"># 设置开机自启动</span>systemctl <span class="token function">enable</span> docker</code></pre><p>结果：</p><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/docker%E6%A6%82%E8%BF%B0%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20220807141646294.png" alt="image-20220807141646294"></p><p>下载hello-world镜像进行测试</p><p><img src="https://youyu-blog.oss-cn-beijing.aliyuncs.com/docker%E6%A6%82%E8%BF%B0%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20220807141718528.png" alt="image-20220807141718528"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 9. 查看下载的hello world镜像</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z lib<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY    TAG       IMAGE ID       CREATED         SIZEhello-world   latest    bf756fb1ae65   11 months ago   13.3kB<span class="token comment" spellcheck="true"># 10. Docker的卸载</span><span class="token comment" spellcheck="true"># 1. 卸载依赖</span>yum remove docker-ce docker-ce-cli containerd.io<span class="token comment" spellcheck="true"># 2. 删除资源  . /var/lib/docker是docker的默认工作路径</span><span class="token function">rm</span> -rf /var/lib/docker<span class="token comment" spellcheck="true">#  11.配置阿里云镜像加速</span>（1）进入阿里云官网，搜索容器镜像服务 <span class="token punctuation">(</span>2<span class="token punctuation">)</span> 执行类似下面的四条命令 <span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://axvfsf7e.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><h3 id="4-Docker常用命令"><a href="#4-Docker常用命令" class="headerlink" title="4. Docker常用命令"></a>4. Docker常用命令</h3><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><blockquote><p>docker version          #查看docker的版本信息<br>docker info             #查看docker的系统信息,包括镜像和容器的数量<br>docker 命令 –help       #帮助命令(可查看可选的参数)<br>docker COMMAND –help</p></blockquote><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1.docker images 查看本地主机的所有镜像</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY    TAG       IMAGE ID       CREATED         SIZEhello-world   latest    bf756fb1ae65   11 months ago   13.3kB<span class="token comment" spellcheck="true">#解释:</span>1.REPOSITORY  镜像的仓库源2.TAG  镜像的标签3.IMAGE ID 镜像的id4.CREATED 镜像的创建时间5.SIZE 镜像的大小<span class="token comment" spellcheck="true"># 可选参数</span>-a/--all 列出所有镜像-q/--quiet 只显示镜像的id<span class="token comment" spellcheck="true"># 2.docker search 搜索镜像</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker search mysql</span><span class="token comment" spellcheck="true"># 3.docker pull 镜像名[:tag] 下载镜像</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql</span><span class="token comment" spellcheck="true"># 4.指定版本下载</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql:5.7</span><span class="token comment" spellcheck="true"># 5.docker rmi 删除镜像</span>    <span class="token comment" spellcheck="true">#1.删除指定的镜像id</span>    <span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker rmi -f  镜像id</span>    <span class="token comment" spellcheck="true">#2.删除多个镜像id</span>    <span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker rmi -f  镜像id 镜像id 镜像id</span>    <span class="token comment" spellcheck="true">#3.删除全部的镜像id</span>    <span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker rmi -f  $(docker images -aq)</span></code></pre><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如拉取一个centos镜像</span>docker pull centos<span class="token comment" spellcheck="true"># 1.运行容器的命令</span>docker run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image<span class="token comment" spellcheck="true"># 2.运行并进入容器centos</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash</span><span class="token punctuation">[</span>root@bd1b8900c547 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls      </span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token comment" spellcheck="true"># 3.退出容器命令</span><span class="token punctuation">[</span>root@bd1b8900c547 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit</span><span class="token keyword">exit</span><span class="token comment" spellcheck="true"># 4.列出运行过的容器命令</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span><span class="token comment" spellcheck="true"># 5.删除容器命令</span>docker <span class="token function">rm</span> 容器id                 <span class="token comment" spellcheck="true">#删除指定的容器,不能删除正在运行的容器,强制删除使用 rm -f</span>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span>   <span class="token comment" spellcheck="true">#删除所有的容器</span>docker <span class="token function">ps</span> -a -q<span class="token operator">|</span><span class="token function">xargs</span> docker <span class="token function">rm</span> <span class="token comment" spellcheck="true">#删除所有的容器</span><span class="token comment" spellcheck="true"># 6.启动和停止容器命令</span>docker start 容器id          <span class="token comment" spellcheck="true">#启动容器</span>docker restart 容器id        <span class="token comment" spellcheck="true">#重启容器</span>docker stop 容器id           <span class="token comment" spellcheck="true">#停止当前运行的容器</span>docker <span class="token function">kill</span> 容器id           <span class="token comment" spellcheck="true">#强制停止当前容器</span></code></pre><h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1.日志的查看</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker logs --help</span><span class="token comment" spellcheck="true"># 2. 查看容器中进程信息</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker top 容器id</span><span class="token comment" spellcheck="true"># 3.查看容器的元数据</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker inspect 容器id</span><span class="token comment" spellcheck="true"># 4.进入当前正在运行的容器</span><span class="token comment" spellcheck="true"># 因为通常我们的容器都是使用后台方式来运行的，有时需要进入容器修改配置</span>方式一： <span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it 容器id /bin/bash</span>方式二： <span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker attach 容器id</span></code></pre><h3 id="5-提交镜像"><a href="#5-提交镜像" class="headerlink" title="5. 提交镜像"></a>5. 提交镜像</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用docker commit 命令提交容器成为一个新的版本</span>docker commit -m<span class="token operator">=</span>“提交的描述信息”  -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span> eg:<span class="token comment" spellcheck="true"># 由于默认的Tomcat镜像的webapps文件夹中没有任何内容，需要从webapps.dist中拷贝文件到webapps文件夹。下面自行制作镜像：就是从webapps.dist中拷贝文件到webapps文件夹下，并提交该镜像作为一个新的镜像。使得该镜像默认的webapps文件夹下就有文件。具体命令如下：</span>  <span class="token comment" spellcheck="true">#1.复制文件夹</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it tomcat /bin/bash</span>root@2a3bf3eaa2e4:/usr/local/tomcat<span class="token comment" spellcheck="true"># cd webapps</span>root@2a3bf3eaa2e4:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># ls</span>root@2a3bf3eaa2e4:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># cd ../</span>root@2a3bf3eaa2e4:/usr/local/tomcat<span class="token comment" spellcheck="true"># cp -r webapps.dist/* webapps</span>root@2a3bf3eaa2e4:/usr/local/tomcat<span class="token comment" spellcheck="true"># cd webapps</span>root@2a3bf3eaa2e4:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># ls</span>ROOT  docs  examples  host-manager  manager<span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE                 COMMAND        CREATED         STATUS         PORTS                    NAMES2a3bf3eaa2e4   tomcat                <span class="token string">"/bin/bash"</span>    4 minutes ago   Up 4 minutes   8080/tcp                 competent_torvalds7789d4505a00   portainer/portainer   <span class="token string">"/portainer"</span>   24 hours ago    Up 24 hours    0.0.0.0:8088-<span class="token operator">></span>9000/tcp   quirky_sinoussi<span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it 2a3bf3eaa2e4 /bin/bash</span>root@2a3bf3eaa2e4:/usr/local/tomcat<span class="token comment" spellcheck="true"># cd webapps</span>root@2a3bf3eaa2e4:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># ls</span>ROOT  docs  examples  host-manager  managerroot@2a3bf3eaa2e4:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># cd ../</span>root@2a3bf3eaa2e4:/usr/local/tomcat<span class="token comment" spellcheck="true"># read escape sequence</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID   IMAGE                 COMMAND        CREATED         STATUS         PORTS                    NAMES2a3bf3eaa2e4   tomcat                <span class="token string">"/bin/bash"</span>    8 minutes ago   Up 8 minutes   8080/tcp                 competent_torvalds7789d4505a00   portainer/portainer   <span class="token string">"/portainer"</span>   24 hours ago    Up 24 hours    0.0.0.0:8088-<span class="token operator">></span>9000/tcp   quirky_sinoussi<span class="token comment" spellcheck="true">#2.提交镜像作为一个新的镜像</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker commit -m="add webapps" -a="Ethan" 2a3bf3eaa2e4 mytomcat:1.0</span>sha256:f189aac861de51087af5bc88a5f1de02d9574e7ee2d163c647dd7503a2d3982b<span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY            TAG       IMAGE ID       CREATED         SIZEmytomcat              1.0       f189aac861de   7 seconds ago   653MBmysql                 5.7       f07dfa83b528   6 days ago      448MBtomcat                latest    feba8d001e3f   10 days ago     649MBnginx                 latest    ae2feff98a0c   12 days ago     133MBcentos                latest    300e315adb2f   2 weeks ago     209MBportainer/portainer   latest    62771b0b9b09   5 months ago    79.1MBelasticsearch         7.6.2     f29a1ee41030   9 months ago    791MB<span class="token comment" spellcheck="true">#3.运行容器</span><span class="token punctuation">[</span>root@iZwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it mytomcat:1.0 /bin/bash</span>root@1645774d4605:/usr/local/tomcat<span class="token comment" spellcheck="true"># cd webapps</span>root@1645774d4605:/usr/local/tomcat/webapps<span class="token comment" spellcheck="true"># ls</span>ROOT  docs  examples  host-manager  managerwz99sm8v95sckz8bd2c4Z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY            TAG       IMAGE ID       CREATED         SIZEmytomcat              1.0       f189aac861de   7 seconds ago   653MBmysql                 5.7       f07dfa83b528   6 days ago      448MBtomcat                latest    feba8d001e3f   10 days ago     649MBnginx                 latest    ae2feff98a0c   12 days ago     133MBcentos                latest    300e315adb2f   2 weeks ago     209MBportainer/portainer   latest    62771b0b9b09   5 months ago    79.1MBelasticsearch         7.6.2     f29a1ee41030   9 months ago    791MB</code></pre><h3 id="总结：掌握了以上基本的Docker命令，才是Docker入门的基础哦！！！"><a href="#总结：掌握了以上基本的Docker命令，才是Docker入门的基础哦！！！" class="headerlink" title="总结：掌握了以上基本的Docker命令，才是Docker入门的基础哦！！！"></a>总结：掌握了以上基本的Docker命令，才是Docker入门的基础哦！！！</h3>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java算法常用Api</title>
      <link href="/2022/07/26/Java%E7%AE%97%E6%B3%95%E5%B8%B8%E7%94%A8Api/"/>
      <url>/2022/07/26/Java%E7%AE%97%E6%B3%95%E5%B8%B8%E7%94%A8Api/</url>
      
        <content type="html"><![CDATA[<ol><li><p>int 型 转 String 型</p><blockquote><pre class=" language-java"><code class="language-java">String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></code></pre></blockquote></li><li><p>字符串反转工具StringBuffer（安全），StringBuild（不安全）</p><blockquote><pre class=" language-java"><code class="language-java">StringBuffer start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span>StringBuffer end<span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>数组去长度，和字符串取长度</p></li></ol><blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    数组</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>strs<span class="token punctuation">.</span>length    <span class="token comment" spellcheck="true">// 字符串</span>String str <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付</title>
      <link href="/2022/07/21/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
      <url>/2022/07/21/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<h2 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><ol><li>你需要注册一个<a href="https://open.weixin.qq.com/">开发者资质的认证</a>(只支持企业类型，收费)</li><li>关联的公众号appId</li><li>商户号</li><li>商户key</li><li>回调地址</li></ol><h3 id="2-引入微信支付相关依赖"><a href="#2-引入微信支付相关依赖" class="headerlink" title="2.引入微信支付相关依赖"></a>2.引入微信支付相关依赖</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>wxpay<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>wxpay<span class="token operator">-</span>sdk<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h3 id="3-生成支付微信二维码"><a href="#3-生成支付微信二维码" class="headerlink" title="3.生成支付微信二维码"></a>3.生成支付微信二维码</h3><pre class=" language-java"><code class="language-java">#支付#关联的公众号appidweixin<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>appid<span class="token operator">=</span>微信id#商户号weixin<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>partner<span class="token operator">=</span>商户号#商户keyweixin<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>partnerkey<span class="token operator">=</span>商户key#回调地址weixin<span class="token punctuation">.</span>pay<span class="token punctuation">.</span>notifyurl<span class="token operator">=</span>回调地址</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        2、使用map设置二维码需要的参数</span>            Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"appid"</span><span class="token punctuation">,</span> appId<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mch_id"</span><span class="token punctuation">,</span> partner<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nonce_str"</span><span class="token punctuation">,</span> WXPayUtil<span class="token punctuation">.</span><span class="token function">generateNonceStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCourseTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total_fee"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getTotalFee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//元角分转换成long</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"spbill_create_ip"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//baidu.com</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"notify_url"</span><span class="token punctuation">,</span> notifyurl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回调地址</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"trade_type"</span><span class="token punctuation">,</span> <span class="token string">"NATIVE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//支付类型</span></code></pre><ol><li><p>发送httpClient请求，传递参数xml格式，微信提供的固定地址</p><pre class=" language-java"><code class="language-java">            HttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token string">"https://api.mch.weixin.qq.com/pay/unifiedorder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这个地址是固定的</span><span class="token comment" spellcheck="true">//            向请求中设置参数</span>            client<span class="token punctuation">.</span><span class="token function">setXmlParam</span><span class="token punctuation">(</span>WXPayUtil<span class="token punctuation">.</span><span class="token function">generateSignedXml</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>partnerkey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">setHttps</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//https不支持，要写上这个才支持</span><span class="token comment" spellcheck="true">//            执行请求发送</span>            client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>请求发送后得到一个结果（xml格式），我们需转换为map格式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        4、得到发送请求返回结果</span><span class="token comment" spellcheck="true">//            返回的内容是xml格式返回的，我们可以把xml格式转为map集合  这里不能用Gson</span>String content <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> resultMap <span class="token operator">=</span> WXPayUtil<span class="token punctuation">.</span><span class="token function">xmlToMap</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            这里返回的resultMap只有二维码地址，而我们还需要其他信息，所以封装</span>            Map mapAdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapAdd<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"out_trade_no"</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>            mapAdd<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"course_id"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getCourseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapAdd<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total_fee"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getTotalFee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapAdd<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result_code"</span><span class="token punctuation">,</span> resultMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"result_code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回二维码的状态码</span>            mapAdd<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code_url"</span><span class="token punctuation">,</span> resultMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"code_url"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回二维码的地址</span>            <span class="token keyword">return</span> mapAdd<span class="token punctuation">;</span></code></pre></li></ol><h3 id="4-生成微信支付二维码成功"><a href="#4-生成微信支付二维码成功" class="headerlink" title="4.生成微信支付二维码成功"></a>4.生成微信支付二维码成功</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信登录</title>
      <link href="/2022/07/21/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/"/>
      <url>/2022/07/21/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h2><h3 id="1-准备工作："><a href="#1-准备工作：" class="headerlink" title="1.准备工作："></a>1.准备工作：</h3><ol><li>你需要注册一个<a href="https://open.weixin.qq.com/">开发者资质的认证</a>(只支持企业类型，收费)</li><li>注册成功后，会得到一个微信id和微信密钥</li><li>扫完微信二维码后需要得到一个域名的地址</li></ol><p>所以我们使用微信登陆需要三个东西（微信id，微信密钥，域名地址）</p><pre class=" language-java"><code class="language-java"># 微信登录配置# 微信开放平台 appidwx<span class="token punctuation">.</span>open<span class="token punctuation">.</span>app_id<span class="token operator">=</span>微信id# 微信开放平台 appsecretwx<span class="token punctuation">.</span>open<span class="token punctuation">.</span>app_secret<span class="token operator">=</span>微信密钥# 微信开放平台 重定向urlwx<span class="token punctuation">.</span>open<span class="token punctuation">.</span>redirect_url<span class="token operator">=</span>域名地址<span class="token comment" spellcheck="true">//    特别注明：=两边不能出现空格，否则将会解析错误</span></code></pre><h3 id="2-生成微信二维码"><a href="#2-生成微信二维码" class="headerlink" title="2.生成微信二维码"></a>2.生成微信二维码</h3><ol><li>我们需要去请求一个固定的地址，并且传一些参数</li></ol><p>通过在PC端打开以下链接：<br><a href="https://open.weixin.qq.com/connect/qrconnect?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect">https://open.weixin.qq.com/connect/qrconnect?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p><p><strong>参数说明</strong></p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">是</td><td align="left">应用唯一标识</td></tr><tr><td align="left">redirect_uri</td><td align="left">是</td><td align="left">请使用urlEncode对链接进行处理（需要做个编码）</td></tr><tr><td align="left">response_type</td><td align="left">是</td><td align="left">填code</td></tr><tr><td align="left">scope</td><td align="left">是</td><td align="left">应用授权作用域，拥有多个作用域用逗号（,）分隔，网页应用目前仅填写snsapi_login即</td></tr><tr><td align="left">state</td><td align="left">否</td><td align="left">用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验</td></tr></tbody></table><ol start="2"><li><p>参数填充</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//       %s相当于?，表示占位符</span>        String baseUrl <span class="token operator">=</span> <span class="token string">"https://open.weixin.qq.com/connect/qrconnect"</span> <span class="token operator">+</span>        <span class="token string">"?appid=%s"</span> <span class="token operator">+</span>        <span class="token string">"&amp;redirect_uri=%s"</span> <span class="token operator">+</span>        <span class="token string">"&amp;response_type=code"</span> <span class="token operator">+</span>        <span class="token string">"&amp;scope=snsapi_login"</span> <span class="token operator">+</span>        <span class="token string">"&amp;state=%s"</span> <span class="token operator">+</span>        <span class="token string">"#wechat_redirect"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        需要对url进行编码，将特殊符合进行处理</span>        String redirectUrl <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>域名地址<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                baseUrl<span class="token punctuation">,</span>                wxOpenAppId<span class="token punctuation">,</span>                redirectUrl<span class="token punctuation">,</span>                <span class="token string">"秋有鱼"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    最终这个固定地址里面就包含了我们所需要的参数值</span>        <span class="token keyword">return</span> <span class="token string">"redirect:"</span><span class="token operator">+</span>url<span class="token punctuation">;</span></code></pre></li></ol><p>这样去访问到的url就能得到一个微信二维码</p><h3 id="3-微信扫描二维码"><a href="#3-微信扫描二维码" class="headerlink" title="3. 微信扫描二维码"></a>3. 微信扫描二维码</h3><ol><li><p>扫描二维码后，它会去调用我们的域名地址（即地址栏发生变化）</p><p><strong>因为我们是个人项目，以后公司项目就不用下面所说的步骤那么麻烦</strong></p></li><li><p>把本地服务端口号改成，地址栏显示的端口号</p><pre class=" language-java"><code class="language-java">server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8160</span></code></pre></li><li><p>回调接口的地址和域名跳转的地址写成一样</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/ucenter/wx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    这种规则只是为了测试使用，在实际开发中，把程序直接部署到域名服务器上即可    </span><span class="token comment" spellcheck="true">//    http://localhost:8160/api/ucenter/wx/callback?code=021P2o000LHZ8O1Wr7300m9CmP3P2o09&amp;state=秋有鱼</span><span class="token comment" spellcheck="true">//    这个路径必须是callback</span><span class="token comment" spellcheck="true">//    获取扫描人信息</span><span class="token comment" spellcheck="true">//    扫完二维码后，默认调用callback方法</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/callback"</span><span class="token punctuation">)</span> </code></pre></li><li><p>写一个方法接收这两个参数，拿着获取到的code值，再去请求微信提供的固定地址</p><pre class=" language-java"><code class="language-java">String baseAccessTokenUrl <span class="token operator">=</span> <span class="token string">"https://api.weixin.qq.com/sns/oauth2/access_token"</span> <span class="token operator">+</span><span class="token string">"?appid=%s"</span> <span class="token operator">+</span><span class="token string">"&amp;secret=%s"</span> <span class="token operator">+</span><span class="token string">"&amp;code=%s"</span> <span class="token operator">+</span><span class="token string">"&amp;grant_type=authorization_code"</span><span class="token punctuation">;</span>String accessTokenUrl <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>        baseAccessTokenUrl<span class="token punctuation">,</span>        wxOpenAppId<span class="token punctuation">,</span>        wxOpenAppSecret<span class="token punctuation">,</span>        code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    access_token：访问凭证</span><span class="token comment" spellcheck="true">//    openid：每个微信的一个唯一标识   </span></code></pre></li><li><p>accessToken，openid转换</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        请求这个拼接好的地址，得到access_token(访问凭证)，openid</span><span class="token comment" spellcheck="true">//        我们并不需要请求这个页面，所以要用到httpclient，得到返回结果</span><span class="token comment" spellcheck="true">//        httpclient，不用浏览器，能模拟出浏览器的请求和响应</span>        String accessTokenInfo <span class="token operator">=</span> HttpClientUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>accessTokenUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        要从accessTokenInfo中获取access_token(访问凭证)，openid</span><span class="token comment" spellcheck="true">//        因为accessTokenInfo是json格式，要获取其中变量和值，转为map格式</span><span class="token comment" spellcheck="true">//        使用json转换工具Gson</span>        Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap map <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>accessTokenInfo<span class="token punctuation">,</span> HashMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String access_token <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String openid <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>拿着上一步获得的access_token和openid，再去请求微信提供的固定地址</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        3.拿着得到的access_token，openid，再去访问微信提供的固定地址，获取到扫面人的信息</span>        String baseUserInfoUrl <span class="token operator">=</span> <span class="token string">"https://api.weixin.qq.com/sns/userinfo"</span> <span class="token operator">+</span>        <span class="token string">"?access_token=%s"</span> <span class="token operator">+</span>        <span class="token string">"&amp;openid=%s"</span><span class="token punctuation">;</span>        String userInfoUrl <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                baseUserInfoUrl<span class="token punctuation">,</span>                access_token<span class="token punctuation">,</span>                openid        <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>最终可以得到扫描微信二维码人的信息</p><pre class=" language-java"><code class="language-java">        String userInfo <span class="token operator">=</span> HttpClientUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userInfoUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(userInfo);</span>        HashMap map1 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> HashMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String openid1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String nickname <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String headimgurl <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"headimgurl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="4-最后得到微信扫描人的信息"><a href="#4-最后得到微信扫描人的信息" class="headerlink" title="4.最后得到微信扫描人的信息"></a>4.最后得到微信扫描人的信息</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 微信登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育项目总结</title>
      <link href="/2022/07/21/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2022/07/21/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1、项目描述"><a href="#1、项目描述" class="headerlink" title="1、项目描述"></a>1、项目描述</h3><p>（1）</p><p>在线教育系统，分为前台网站系统和后台运营平台，B2C模式。</p><p>前台用户系统包括课程、讲师、问答、文章几大大部分，使用了微服务技术架构，前后端分离开发。</p><p>后端的主要技术架构是：SpringBoot + SpringCloud + MyBatis-Plus + HttpClient + MySQL + Maven+EasyExcel+ nginx</p><p>前端的架构是：Node.js + Vue.js +element-ui+NUXT+ECharts</p><p>其他涉及到的中间件包括Redis、阿里云OSS、阿里云视频点播</p><p>业务中使用了ECharts做图表展示，使用EasyExcel完成分类批量添加、注册分布式单点登录使用了JWT</p><p>（2）</p><p>项目前后端分离开发，后端采用SpringCloud微服务架构，持久层用的是MyBatis-Plus，微服务分库设计，使用Swagger生成接口文档</p><p>接入了阿里云视频点播、阿里云OSS。</p><p>系统分为前台用户系统和后台管理系统两部分。</p><p>前台用户系统包括：首页、课程、名师、问答、文章。</p><p>后台管理系统包括：讲师管理、课程分类管理、课程管理、统计分析、Banner管理、订单管理、权限管理等功能。</p><p>在线教育计费案例：</p><p>小A是一名杭州的创业者，带领团队研发了一个在线教育平台。他希望把视频托管在阿里云上，存量视频大约1000个，占用存储空间近1T，每月预计新增视频100个，并新增存储约100G，课程视频的时长集中在20-40分钟，并且按照不同课程进行分类管理。为了保障各端的观看效果，计划为用户提供“标清480P”和“高清720P”两种清晰度。目前已有用户400人左右，每日平均视频观看次数1000次，在移动端和PC端观看次数比例大致为3:1。</p><h3 id="2、这是一个项目还是一个产品"><a href="#2、这是一个项目还是一个产品" class="headerlink" title="2、这是一个项目还是一个产品"></a>2、这是一个项目还是一个产品</h3><p>这是一个产品</p><p>1.0版本是单体应用：SSM</p><p>2.0版本加入了SpringCloud，将一些关键业务和访问量比较大的部分分离了出去</p><p>目前独立出来的服务有教学服务、视频点播服务、用户服务、统计分析服务、网关服务</p><h3 id="3、测试要求"><a href="#3、测试要求" class="headerlink" title="3、测试要求"></a>3、测试要求</h3><p>首页和视频详情页qps单机qps要求 2000+</p><p>经常用每秒查询率来衡量域名系统服务器的机器的性能，其即为QPS</p><p>QPS &#x3D; 并发量 &#x2F; 平均响应时间</p><h3 id="4、企业中的项目（产品）开发流程"><a href="#4、企业中的项目（产品）开发流程" class="headerlink" title="4、企业中的项目（产品）开发流程"></a>4、企业中的项目（产品）开发流程</h3><p>一个中大型项目的开发流程</p><p>1、需求调研（产品经理）</p><p>2、需求评审（产品&#x2F;设计&#x2F;前端&#x2F;后端&#x2F;测试&#x2F;运营）</p><p>3、立项（项目经理、品管）</p><p>4、UI设计</p><p>5、开发</p><ul><li>架构、数据库设计、API文档、MOCK数据、开发、单元测试</li><li>前端</li><li>后端</li></ul><p>6、前端后端联调</p><p>7、项目提测：黑盒白盒、压力测试（qps）  loadrunner</p><p>8、bug修改</p><p>9、回归测试</p><p>10、运维和部署上线</p><p>11、灰度发布</p><p>12、全量发布</p><p>13、维护和运营</p><p>5、系统中都有那些角色？数据库是怎么设计的？</p><p>前台：会员（学员）</p><p>后台：系统管理员、运营人员</p><p>后台分库，每个微服务一个独立的数据库，使用了分布式id生成器</p><h3 id="6、视频点播是怎么实现的（流媒体你们是怎么实现的）"><a href="#6、视频点播是怎么实现的（流媒体你们是怎么实现的）" class="headerlink" title="6、视频点播是怎么实现的（流媒体你们是怎么实现的）"></a>6、视频点播是怎么实现的（流媒体你们是怎么实现的）</h3><p>我们直接接入了阿里云的云视频点播。云平台上的功能包括视频上传、转码、加密、智能审核、监控统计等。</p><p>还包括视频播放功能，阿里云还提供了一个视频播放器。</p><h3 id="7、前后端联调经常遇到的问题："><a href="#7、前后端联调经常遇到的问题：" class="headerlink" title="7、前后端联调经常遇到的问题："></a>7、前后端联调经常遇到的问题：</h3><p>   1、请求方式post、get</p><p>   2、json、x-wwww-form-urlencoded混乱的错误</p><p>   3、后台必要的参数，前端省略了</p><p>   4、数据类型不匹配</p><p>   5、空指针异常</p><p>   6、分布式系统中分布式id生成器生成的id 长度过大（19个字符长度的整数），js无法解析（js智能解析16个长度：2的53次幂）</p><p>​     id策略改成 ID_WORKER_STR</p><h3 id="8、前后端分离项目中的跨域问题是如何解决的"><a href="#8、前后端分离项目中的跨域问题是如何解决的" class="headerlink" title="8、前后端分离项目中的跨域问题是如何解决的"></a>8、前后端分离项目中的跨域问题是如何解决的</h3><p>后端服务器配置：我们的项目中是通过Spring注解解决跨域的 @CrossOrigin</p><p>也可以使用nginx反向代理、httpClient、网关</p><h3 id="9、说说你做了哪个部分、遇到了什么问题、怎么解决的"><a href="#9、说说你做了哪个部分、遇到了什么问题、怎么解决的" class="headerlink" title="9、说说你做了哪个部分、遇到了什么问题、怎么解决的"></a>9、说说你做了哪个部分、遇到了什么问题、怎么解决的</h3><p>问题1：</p><p>分布式id生成器在前端无法处理，总是在后三位进行四舍五入。</p><p>分布式id生成器生成的id是19个字符的长度，前端javascript脚本对整数的处理能力只有2的53次方，也就是最多只能处理16个字符</p><p>解决的方案是把id在程序中设置成了字符串的性质</p><p>问题2：</p><p>项目迁移到Spring-Cloud的时候，经过网关时，前端传递的cookie后端一只获取不了，看了cloud中zuul的源码，发现向下游传递数据的时候，zull默认过滤了敏感信息，将cookie过滤掉了</p><p>解决的方案是在配置文件中将请求头的过滤清除掉，使cookie可以向下游传递</p><p>问题3…….</p><h3 id="10、分布式系统的id生成策略"><a href="#10、分布式系统的id生成策略" class="headerlink" title="10、分布式系统的id生成策略"></a>10、分布式系统的id生成策略</h3><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">主键生成策略</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="11、项目组有多少人，人员如何组成？"><a href="#11、项目组有多少人，人员如何组成？" class="headerlink" title="11、项目组有多少人，人员如何组成？"></a>11、项目组有多少人，人员如何组成？</h3><h3 id="12、分布式系统的CAP原理"><a href="#12、分布式系统的CAP原理" class="headerlink" title="12、分布式系统的CAP原理"></a>12、分布式系统的CAP原理</h3><p><strong>CAP定理：</strong></p><p>指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可同时获得。</p><p> 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（所有节点在同一时间的数据完全一致，越多节点，数据同步越耗时）</p><p>可用性（A）：负载过大后，集群整体是否还能响应客户端的读写请求。（服务一直可用，而且是正常响应时间）</p><p>分区容错性（P）：分区容错性，就是高可用性，一个节点崩了，并不影响其它的节点（100个节点，挂了几个，不影响服务，越多机器越好）</p><p><strong>CA 满足的情况下，P不能满足的原因：</strong></p><p>数据同步(C)需要时间，也要正常的时间内响应(A)，那么机器数量就要少，所以P就不满足</p><p><strong>CP 满足的情况下，A不能满足的原因：</strong></p><p>数据同步(C)需要时间, 机器数量也多(P)，但是同步数据需要时间，所以不能再正常时间内响应，所以A就不满足</p><p><strong>AP 满足的情况下，C不能满足的原因：</strong></p><p>机器数量也多(P)，正常的时间内响应(A)，那么数据就不能及时同步到其他节点，所以C不满足</p><p><strong>注册中心选择的原则：</strong></p><p>Zookeeper：CP设计，保证了一致性，集群搭建的时候，某个节点失效，则会进行选举行的leader，或者半数以上节点不可用，则无法提供服务，因此可用性没法满足</p><p>Eureka：AP原则，无主从节点，一个节点挂了，自动切换其他节点可以使用，去中心化</p><p><strong>结论：</strong></p><p>分布式系统中P,肯定要满足，所以我们只能在一致性和可用性之间进行权衡</p><p>如果要求一致性，则选择zookeeper，如金融行业</p><p>如果要求可用性，则Eureka，如教育、电商系统</p><p>没有最好的选择，最好的选择是根据业务场景来进行架构设计</p><h3 id="13、前端渲染和后端渲染有什么区别"><a href="#13、前端渲染和后端渲染有什么区别" class="headerlink" title="13、前端渲染和后端渲染有什么区别"></a>13、<strong>前端渲染和后端渲染有什么区别</strong></h3><p>前端渲染是返回json给前端，通过javascript将数据绑定到页面上</p><p>后端渲染是在服务器端将页面生成直接发送给服务器，有利于SEO的优化</p><h3 id="14、能画一下系统架构图吗"><a href="#14、能画一下系统架构图吗" class="headerlink" title="14、能画一下系统架构图吗"></a><strong>14、能画一下系统架构图吗</strong></h3><p><img src="https://edu-youyu.oss-cn-beijing.aliyuncs.com/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/af43e6f7168dd36951b3bf819d7a18f.png" alt="img"></p><h3 id="15、值得学习的技术"><a href="#15、值得学习的技术" class="headerlink" title="15、值得学习的技术"></a>15、值得学习的技术</h3><h4 id="oss"><a href="#oss" class="headerlink" title="oss"></a>oss</h4><ul><li>上传（文件&#x2F;头像）若没有用到数据库，则需要取消数据库的配置</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//    MultipartFile</span><span class="token keyword">public</span> R <span class="token function">uploadOssFile</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 利用oss存储图片文件</span><span class="token comment" spellcheck="true">//        创建OSSClient实例</span>        OSS ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endPoint<span class="token punctuation">,</span> keyId<span class="token punctuation">,</span> keySecret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        上传文件流</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            获取文件名称</span>            String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String filename <span class="token operator">=</span> uuid <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            调用oss的方法实现上传</span><span class="token comment" spellcheck="true">//            1.Bucket名称</span><span class="token comment" spellcheck="true">//            2.上传到oss文件路径和文件名称 aa/bb/1.jpg     1.jpg（一般写文件名称）</span><span class="token comment" spellcheck="true">//            3.上传文件的输入流</span><span class="token comment" spellcheck="true">//            第二个参数可以按aa/bb/1.jpg</span><span class="token comment" spellcheck="true">//            把文件按照日期进行分类       2019/11/12/1.jpg</span>            String date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            最终拼接</span>            filename <span class="token operator">=</span> date <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>            ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            关闭oss</span>            ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            把上传之后的文件路径返回</span><span class="token comment" spellcheck="true">//            需要把上传到阿里云oss路径手动拼接出来</span><span class="token comment" spellcheck="true">//            https://edu-youyu.oss-cn-beijing.aliyuncs.com/a.jpg</span>            String url <span class="token operator">=</span> <span class="token string">"https://"</span><span class="token operator">+</span>bucketName<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>endPoint<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>filename<span class="token punctuation">;</span>            <span class="token keyword">return</span> url<span class="token punctuation">;</span></code></pre><h4 id="二层（章节包含小节情况）"><a href="#二层（章节包含小节情况）" class="headerlink" title="二层（章节包含小节情况）"></a>二层（章节包含小节情况）</h4><ul><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        1、根据课程id查询课程所有章节</span>        QueryWrapper<span class="token operator">&lt;</span>EduChapter<span class="token operator">></span> wrapperChapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapperChapter<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"course_id"</span><span class="token punctuation">,</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>EduChapter<span class="token operator">></span> eduChapterList <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapperChapter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        2、根据课程id查询章节的所有小节</span>        QueryWrapper<span class="token operator">&lt;</span>EduVideo<span class="token operator">></span> wrapperVideo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapperVideo<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"course_id"</span><span class="token punctuation">,</span>courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>EduVideo<span class="token operator">></span> listVideoList<span class="token operator">=</span> eduVideoService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>wrapperVideo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        创建list集合，用于最终封装的数据</span>        ArrayList<span class="token operator">&lt;</span>ChapterVo<span class="token operator">></span> finalist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        3、遍历查询章节list集合进行封装</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> eduChapterList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            得到每个章节</span>            EduChapter eduChapter <span class="token operator">=</span> eduChapterList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            ChapterVo chapterVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChapterVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>eduChapter<span class="token punctuation">,</span>chapterVo<span class="token punctuation">)</span><span class="token punctuation">;</span>            finalist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>chapterVo<span class="token punctuation">)</span><span class="token punctuation">;</span>            ArrayList<span class="token operator">&lt;</span>VideoVo<span class="token operator">></span> videoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        4、便利查询小节list集合进行封装</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> listVideoList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                EduVideo eduVideo <span class="token operator">=</span> listVideoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>chapterVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>eduVideo<span class="token punctuation">.</span><span class="token function">getChapterId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    VideoVo videoVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>eduVideo<span class="token punctuation">,</span>videoVo<span class="token punctuation">)</span><span class="token punctuation">;</span>                    videoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>videoVo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            chapterVo<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span>videoList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> finalist<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><blockquote><p><strong>BeanUtils.copyProperties</strong>：将得到的实体类的get值，set到另一个实体类中去</p></blockquote><blockquote><p>**StringUtils.isEmpty(videoSourceId)**：判断是否为空</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 全栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组常用方法</title>
      <link href="/2022/07/20/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/07/20/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="数组常用的方法"><a href="#数组常用的方法" class="headerlink" title="数组常用的方法"></a>数组常用的方法</h2><p> es6新增的方法，与for循环一样，但是没有内置的index。</p><h3 id="1-for-of循环"><a href="#1-for-of循环" class="headerlink" title="1. for of循环"></a>1. for of循环</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-forEach"><a href="#2-forEach" class="headerlink" title="2. forEach"></a>2. forEach</h3><p> Array.prototype上内置的，遍历出item和index,不会改变原数组，没有返回值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-map"><a href="#3-map" class="headerlink" title="3. map"></a>3. map</h3><p> 获得原数组的映射，遍历出item和index,不会改变原数组，返回新数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">*</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[0,2,6]</span></code></pre><h3 id="4-filter"><a href="#4-filter" class="headerlink" title="4. filter"></a>4. filter</h3><p> 执行迭代函数的返回值如果为真值，则会将这个成员放进新数组，若为假，则不放入，不会改变原数组，返回新数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">*</span> index <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3]</span></code></pre><h3 id="5-find和findIndex"><a href="#5-find和findIndex" class="headerlink" title="5. find和findIndex"></a>5. find和findIndex</h3><p> find()返回值的结果是第一个执行迭代函数的返回值为真值的那一项成员,若都为假，则返回undefined，不会改变原数组。findIndex方法和find方法的原理一样，区别是findIndex方法返回的是第一个符合条件成员的index。如果没有找到符合条件的成员，那么findIndex的返回值是-1。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">"2"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">"3"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">"4"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//{id: 2,label: "2"}</span><span class="token keyword">const</span> index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre><h3 id="6-some和every"><a href="#6-some和every" class="headerlink" title="6. some和every"></a>6. some和every</h3><p> some方法有返回值，如果原数组的每一项成员执行迭代函数的结果，有一项为真值，那么some方法会返回true。反之，如果每一项成员执行迭代函数的返回值都是false，那么some方法的返回值就是false。（或）</p><p> every方法有返回值，如果原数组的每一项成员执行迭代函数的结果，有一项为假值，那么every方法会返回false。反之，如果每一项成员执行迭代函数的返回值都是true，那么every方法的返回值就是true。（且）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true</span><span class="token keyword">const</span> res <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre><h3 id="7-indexOf"><a href="#7-indexOf" class="headerlink" title="7. indexOf"></a>7. indexOf</h3><p> indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。如果匹配到则返回当前项的索引，否则返回-1（如果未找到）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span></code></pre><h3 id="8-concat"><a href="#8-concat" class="headerlink" title="8. concat"></a>8. concat</h3><p> 把元素衔接到数组中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"world!"</span><span class="token punctuation">;</span><span class="token keyword">var</span> n <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"Helloworld!"</span></code></pre><h3 id="9-join"><a href="#9-join" class="headerlink" title="9. join"></a>9. join</h3><p> 将数组的所有元素转化为字符串</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> energy <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,2,3,4</span></code></pre><h3 id="10-reverse"><a href="#10-reverse" class="headerlink" title="10. reverse"></a>10. reverse</h3><p> 在原数组中颠倒元素的顺序。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["4", "3", "2", "1"]</span></code></pre><h3 id="11-slice"><a href="#11-slice" class="headerlink" title="11. slice"></a>11. slice</h3><p>截取数组的一部分。索引从0开始，不包括最后一个参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> citrus <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["2","3"]</span></code></pre><h3 id="12-splice"><a href="#12-splice" class="headerlink" title="12. splice"></a>12. splice</h3><p>插入、删除或替换数组元素。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//插入 在第一个参数前面插入</span><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["1", "5", "6", "2", "3", "4"]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//删除   第一个参数是开始删除的位置，第二个参数是删除几个，第三个参数是替换被删除的元素</span><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["1", "5", "3", "4"]</span></code></pre><h3 id="13-sort"><a href="#13-sort" class="headerlink" title="13. sort"></a>13. sort</h3><p> 在原数组中对数组元素进行排序</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["1", "4", "5", "8"]</span></code></pre><h3 id="14-toString"><a href="#14-toString" class="headerlink" title="14.toString"></a>14.toString</h3><p> 将数组转化为字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,2,3</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 循环 </tag>
            
            <tag> 索引 </tag>
            
            <tag> 取值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的反射有多强大</title>
      <link href="/2022/06/22/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%89%E5%A4%9A%E5%BC%BA%E5%A4%A7/"/>
      <url>/2022/06/22/Java%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%89%E5%A4%9A%E5%BC%BA%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<p>要看到反射有多强大，我们先提一个面试常问的问题，那就是手撕单例模式了。</p><blockquote><p>饿汉式</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一来就创建，不管你使不使用，那就造成资源浪费了</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Hungry hungry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 单例模式，构造器需私有</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Hungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> hungry<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>懒汉式</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazyMan lazyman<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                         <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazyman <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            lazyman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazyman<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 单线程下没问题，多线程下出问题了</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>加锁。双重检测模式的 懒汉式单例，DCL 懒汉式<span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lazyman <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lazyman <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                lazyman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 不是原子性操作，还是会出现问题</span>                <span class="token comment" spellcheck="true">/**                * 1、分配内存空间                * 2、执行构造方法，初始化对象                * 3、让这个对象指向这个空间                所以 lazyman 必须加上 Volatile                 */</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lazyman<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>在上面修改的基础上加上修改<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan lazyman<span class="token punctuation">;</span></code></pre><blockquote><p>静态内部类实现</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Holder <span class="token function">getInstace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>HOLDER<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Holder HOLDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>反射可以破坏单例</p></blockquote><p>只要有反射，代码就不安全。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan lazyman<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                         <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazyman <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lazyman <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    lazyman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> lazyman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 反射</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        LazyMan instance <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span>LazyMan<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 破坏私有权限</span>        LazyMan instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// false  单例被反射破解</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>java</code></pre><p>解决办法：三重检测</p><pre class=" language-java"><code class="language-java">在构造器加锁<span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazyMan<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图使用反射破坏单例模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>又有一个问题</p><pre class=" language-java"><code class="language-java">之前两个对象，一个是通过 LazyMan instance <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 创建的一个是通过反射创建的，如果我两个都是通过反射创建的LazyMan instance1 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LazyMan instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1 <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// false  单例又被反射破解</span></code></pre><p>解决办法：加个标志位（但是如果被反编译了，会发现有此字段，最好就对字段再加密）<strong>四重校验（三层加锁、一层标志位）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan lazyman<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图使用反射破坏单例模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazyman <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lazyman <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    lazyman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> lazyman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 反射</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// LazyMan instance = LazyMan.getInstance();</span>        Constructor<span class="token operator">&lt;</span>LazyMan<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyMan instance1 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyMan instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1 <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// false  单例又被反射破解</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过反射拿到字段，再破坏</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 反射</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    Field flag <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 拿到字段</span>    flag<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 破坏字段私有权限</span>    Constructor<span class="token operator">&lt;</span>LazyMan<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LazyMan instance1 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LazyMan instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span>flase<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 改标志位值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1 <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// false  单例又又又被反射破解</span><span class="token punctuation">}</span></code></pre><p>找源码！！！枚举（反射不能破坏枚举，枚举可以实现单例）</p><p>枚举类实现单例模式是 effective java 作者极力推荐的单例实现模式，因为枚举类型是<strong>线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，而且</strong>枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><p>1、除枚举方式外, 其他方法都会通过反射的方式破坏单例,反射是通过调用构造方法生成新的对象，所以如果我们想要阻止单例破坏，可以在构造方法中进行判断，若已有实例, 则阻止生成新的实例，解决办法如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 枚举本身也是一个类</span><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumSingle<span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> EnumSingle <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        EnumSingle instance1 <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        EnumSingle instance2 <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1 <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// true</span>         <span class="token comment" spellcheck="true">// 使用反射破坏</span>        Constructor<span class="token operator">&lt;</span>EnumSingle<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 破坏私有</span>        EnumSingle instance3 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token operator">==</span>instance3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token boolean">true</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoSuchMethodException<span class="token operator">:</span> com<span class="token punctuation">.</span>wuhai<span class="token punctuation">.</span>single<span class="token punctuation">.</span>EnumSingle<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>这个异常不是我们想要的</code></pre><p>为什么反射破坏不了枚举的单例模式？</p><p>进源码（发现是空参构造，其实 IDEA 骗了我们）</p><p><img src="https://xiaowu-blog-images.oss-cn-shenzhen.aliyuncs.com/articles/b92fee42a469ac22cedfe7674c00e9a0.png" alt="image20220221165350304.png"></p><p>那就反编译（反编译出来的源码也是空参，还是骗了我们）</p><p><img src="https://xiaowu-blog-images.oss-cn-shenzhen.aliyuncs.com/articles/0bc2fc17a2183c7aa1a4dddbb06531ec.png" alt="image20220221165617282.png"></p><p>那就用专业工具反编译 ( jad.exe )</p><p><img src="https://xiaowu-blog-images.oss-cn-shenzhen.aliyuncs.com/articles/7ab0972fd13078d0091cde824b989941.png" alt="image20220221170215363.png"></p><p><img src="https://xiaowu-blog-images.oss-cn-shenzhen.aliyuncs.com/articles/4c163d18d33914b2938b642a63fd2f4b.png" alt="image20220221170240883.png"></p><p>发现真正的源码是带参数的</p><pre class=" language-java"><code class="language-java">docker run <span class="token operator">-</span>p <span class="token number">3306</span><span class="token operator">:</span><span class="token number">3306</span> <span class="token operator">--</span>name mysql <span class="token operator">-</span>v mysqlrollback<span class="token operator">:</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>root <span class="token operator">-</span>d mysql<span class="token operator">:</span><span class="token number">5.7</span>那就反射时给参数<span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        EnumSingle instance1 <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        EnumSingle instance2 <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1 <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// true</span>         <span class="token comment" spellcheck="true">// 使用反射破坏</span>        Constructor<span class="token operator">&lt;</span>EnumSingle<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 破坏私有</span>        EnumSingle instance3 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token operator">==</span>instance3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>此时抛出真正想要的异常Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token operator">:</span> Cannot reflectively create <span class="token keyword">enum</span> objects    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Constructor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">417</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>wuhai<span class="token punctuation">.</span>single<span class="token punctuation">.</span>Test<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>EnumSingle<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span>不能使用反射破坏枚举单例</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反射 </tag>
            
            <tag> 饿汉式 </tag>
            
            <tag> 懒汉式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻塞队列BlockingQueue和四组API</title>
      <link href="/2022/05/03/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97BlockingQueue%E5%92%8C%E5%9B%9B%E7%BB%84API/"/>
      <url>/2022/05/03/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97BlockingQueue%E5%92%8C%E5%9B%9B%E7%BB%84API/</url>
      
        <content type="html"><![CDATA[<h2 id="阻塞队列BlockingQueue和四组API"><a href="#阻塞队列BlockingQueue和四组API" class="headerlink" title="阻塞队列BlockingQueue和四组API"></a>阻塞队列BlockingQueue和四组API</h2><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><h3 id="阻塞、队列的概念"><a href="#阻塞、队列的概念" class="headerlink" title="阻塞、队列的概念"></a>阻塞、队列的概念</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEB691a6bd9848edd0b31ab6e747db59bea?method=download&shareKey=423f795f63dea6bd9af402ba10996570" alt="阻塞与等待"></p><h3 id="阻塞队列："><a href="#阻塞队列：" class="headerlink" title="阻塞队列："></a>阻塞队列：</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEB5b8f92290ba6e95bdafd77112933a299?method=download&shareKey=b31dc8cedfb32a0286f43b7c280675c3" alt="BlockingQueue实现类"></p><p><strong>BlockingQueue 不是新的东西</strong></p><p><strong>什么情况下我们会使用阻塞队列</strong>：多线程并发处理，线程池！</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB394ca09e66e374088cec4187bf31627e?method=download&shareKey=7173f4098ac303bcac3db818d5339838" alt="主要的实现类"></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2b179c23f019c7454291139b388c34dc?method=download&shareKey=8809530c06e0d424ad5685587712c54d" alt="Blocking树形解释"></p><h3 id="学会使用队列"><a href="#学会使用队列" class="headerlink" title="学会使用队列"></a>学会使用队列</h3><p>（远远不止）添加、移出</p><h2 id="四组API（以下基于ArrayBlockingQueue讲解）"><a href="#四组API（以下基于ArrayBlockingQueue讲解）" class="headerlink" title="四组API（以下基于ArrayBlockingQueue讲解）"></a>四组API（以下基于ArrayBlockingQueue讲解）</h2><table><thead><tr><th>方式</th><th>抛出异常</th><th>不会抛出异常，有返回值</th><th>阻塞 等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer()，空参</td><td>put()</td><td>offer(“a”,2,TimeUnit.SECONDS)</td></tr><tr><td>移出</td><td>remove</td><td>poll()</td><td>take()</td><td>offer(2,TimeUnit.SECONDS)</td></tr><tr><td>检测队首元素</td><td>element</td><td>peek</td><td></td><td></td></tr></tbody></table><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lin<span class="token punctuation">.</span>BlockingQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueueTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        Collection</span><span class="token comment" spellcheck="true">//        List</span><span class="token comment" spellcheck="true">//        Set</span><span class="token comment" spellcheck="true">//        BlockingQueue 不是新的东西</span>        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抛出异常     * IllegalStateException: Queue full     * NoSuchElementException：Queue empty     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        &lt;>是要写泛型吗？不是，而是队列的大小，例如车位只能放几个车        ()</span>        ArrayBlockingQueue arrayBlockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        add入队操作</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * IllegalStateException: Queue full */</span><span class="token comment" spellcheck="true">//        System.out.println(arrayBlockingQueue.add("d"));</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//         FIFO</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            remove出队操作</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * NoSuchElementException */</span><span class="token comment" spellcheck="true">//        remove以后队列为空，再取抛异常</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="不抛出异常，有返回值"><a href="#不抛出异常，有返回值" class="headerlink" title="不抛出异常，有返回值"></a>不抛出异常，有返回值</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 不会抛出异常，有返回值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayBlockingQueue arrayBlockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        入队</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 返回 false          */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        出队</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 返回 null         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="阻塞，等待"><a href="#阻塞，等待" class="headerlink" title="阻塞，等待"></a>阻塞，等待</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 阻塞，等待（一直阻塞）     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ArrayBlockingQueue arrayBlockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        入队</span><span class="token comment" spellcheck="true">//        无返回值，一直阻塞</span>        arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        阻塞（一直）</span><span class="token comment" spellcheck="true">//        arrayBlockingQueue.put("d");</span><span class="token comment" spellcheck="true">//           出队</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        阻塞（一直）</span><span class="token comment" spellcheck="true">//        System.out.println(arrayBlockingQueue.take());</span>    <span class="token punctuation">}</span></code></pre><h3 id="超时等待"><a href="#超时等待" class="headerlink" title="超时等待"></a>超时等待</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ArrayBlockingQueue arrayBlockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        入队</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        如果满了就等2s，如果还是满的就超时退出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        出队</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        如果取不出，就超时退出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发线程 </tag>
            
            <tag> 阻塞队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划之01背包算法</title>
      <link href="/2022/04/08/01%E8%83%8C%E5%8C%85%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/08/01%E8%83%8C%E5%8C%85%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong><br>给定N个物品和一个背包，背包的容量为W， 假设背包容量范围在[0，15]，第i个物品对应的体积和价值分别为W[i]和v[i]。各种物品的价值和重量如下：<br>物品编号 1 2 3 4 5<br>重量W 3 4 7 8 9<br>价值V 4 5 10 11 13</p><p><strong>解题思路</strong><br>动态规划原理：是一种将问题实例分解为更小的、相似的子问题，并存储子问题的解而避免计算重复的子问题，以解决最优化问题的算法方法。0&#x2F;1背包问题可以看作是决策一个序列（x1,x2,x3,x4,….xn）,对任一变量xi的决策是决定xi&#x3D;1，还是xi&#x3D;0。在对xi-1决策后，已确定了（x1,x2,x3,x4,….xi-1），在决策xi时，问题处于两种状态之一：<br>背包容量不足以装入物品i，则xi&#x3D;0，背包不增加价值；<br>背包容量可以装入物品i，则xi&#x3D;1，背包价值增加了 vi；<br>这两种情况下背包价值的最大者应该是对xi决策后的背包价值。<br>令v（i，j）表示装载前i种物品，总重量不超过j时背包的最大价值<br>面对当前商品有两种可能性：<br>包的容量比该商品体积小，装不下，此时的价值与前i-1个的价值是一样的，即V(i,j)&#x3D;V(i-1,j)；<br>还有足够的容量可以装该商品，但装了也不一定达到当前最优价值，所以在装与不装之间选择最优的一个，即V(i,j)&#x3D;max｛V(i-1,j)，V(i-1,j-w(i))+v(i)｝。<br>其中V(i-1,j)表示不装，V(i-1,j-w(i))+v(i) 表示装了第i个商品，背包容量减少w(i)，但价值增加了v(i)；</p><p>由此可以得出递推关系式：<br>j&lt;w(i) V(i,j)&#x3D;V(i-1,j)<br>j&gt;&#x3D;w(i) V(i,j)&#x3D;max｛V(i-1,j)，V(i-1,j-w(i))+v(i)｝</p><p>根据递推公式,可以逐步求出当物品数为 i ,背包容量为 j 时的背包最大总价值，<br>但在求解之前，要将边界初始化<br>显然的 v(0,j)&#x3D;0，v(i,0)&#x3D;0</p><p><strong>构造最优解</strong><br>通过上面的方法可以求出背包问题的最优解，但还不知道这个最优解由哪些商品组成，可以通过最优解回溯找出解的组成：</p><p>我们可以声明一个长度为6的数组content[6]来标记物品是否选取，content[1]~content[5]分别对应物品1到物品5，将数组初始化为0，<br>1表示选取该物品，0表示不选取<br>V(i,j)&#x3D;V(i-1,j) 或者 j - w[i] &lt;0 时，说明没有选择第i 个商品，则回到V(i-1,j)；<br>否则即说明装了第i个商品，该商品是最优解组成的一部分，content[i]&#x3D;1，然后回到V(i-1,j-w(i))；<br>一直遍历到i＝0结束为止,我们能找到所有解的组成</p><p>(ps:对我来说,单纯看理论概念很容易烦躁而且很难理解，通过源代码结合概念能够有更清晰的认识）</p><p><strong>源代码</strong>：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*本关任务：给定N个物品和一个背包，背包的容量为W， 假设背包容量范围在[0，15]，第i个物品对应的体积和价值分别为W[i]和v[i]。各种物品的价值和重量如下：     物品编号   1   2   3   4   5      重量W    3   4   7   8   9      价值V    4   5   10  11  13求: 如何选择装入背包的物品，使得装入背包的物品的总价值为最大.*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> content<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//最优解的物品组成</span><span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//物品对应的重量</span><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//物品对应的价值</span><span class="token keyword">int</span> bV<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//背包的最大容量为15</span><span class="token keyword">int</span> maxVal<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//存放当物品数为i,背包容量为j的最大总价值</span><span class="token keyword">void</span> <span class="token function">findContent</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//找到最优解的物品组成</span><span class="token keyword">void</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//寻找当物品数为i,背包容量为j时的最大总价值</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//打印最优解物品组成</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当物品数为i,背包容量为j时的能装入背包的最大总价值\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打印当物品数为i,背包容量为j时的最大总价值</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d  "</span><span class="token punctuation">,</span>maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入当前的物品数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入当前背包的最大容量: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">findContent</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最优解的物品组成为： \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"价值为 %d ,重量为 %d 的 %d 号物品\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"物品数为%d 背包容量为 %d时的最大总价值为 %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//寻找当物品数为i,背包容量为j时的最大总价值</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//如果背包容量小于物品i重量，表示背包存放不下第i种物品,此时的最大总价值为i-1种物品的最大总价值</span>                maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> maxVal<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>maxVal<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//放下第i种物品时的总价值为第i种物品的价值加上当物品数为i-1背包容量为j-w[i]的最优解</span>            maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>maxVal<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 对比当放下第i种物品时的总价值和物品数位i-1时的总价值，取最大值</span>        <span class="token keyword">else</span>            maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>maxVal<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">findContent</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//最优解组成</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxVal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> maxVal<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            content<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">findContent</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            content<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">findContent</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果</strong></p><p><img src="https://img-blog.csdnimg.cn/20200425095631713.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法</title>
      <link href="/2022/03/28/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/03/28/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法真的是非常简单而且好用</p><p>Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。<br>用于编写说明文档，并且以“README.md”的文件名保存在软件的目录下面。<br>除此之外，由于我们有了RStudio这样的神级编辑器，我们还可以快速将Markdown转化为演讲PPT、Word产品文档、LaTex论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown已经广泛使用，极大地推进了动态可重复性研究的历史进程。</p><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，两个#是二级标题，以此类推。支持六级标题，标题字号逐级递减降低</p><p><strong>注：标准语法在#后跟个空格再写文字</strong></p><p><strong>示例：</strong></p><pre><code># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre><p><strong>效果如下</strong></p><p><img src="https://img-blog.csdnimg.cn/20200426182643977.png" alt="img"></p><h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h3><p>加粗<br>要加粗的文字左右分别用两个 * 号包起来<br>斜体<br>要倾斜的文字左右分别用一个 * 号包起来<br>斜体加粗<br>要倾斜和加粗的文字左右分别用三个 * 号包起来<br>删除线<br>要加删除线的文字左右分别用两个~~号包起来</p><p><strong>示例：</strong></p><pre><code>**这是加粗的文字***这是倾斜的文字****这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><p><strong>效果如下：</strong><br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br>*<strong>这是斜体加粗的文字*</strong><br><del>这是加删除线的文字</del></p><h3 id="3-分割线"><a href="#3-分割线" class="headerlink" title="3.分割线"></a>3.分割线</h3><p>三个或者三个以上的 - 或者 * 都可以</p><p><strong>示例：</strong></p><pre><code>---***</code></pre><p><strong>效果如下</strong></p><hr><hr><h3 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h3><p>在需要引用的文字前加&gt;即可</p><p><strong>示例：</strong></p><pre><code>&gt;这是需要引用的文字</code></pre><blockquote><p>这是需要引用的文字</p></blockquote><h3 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h3><pre><code>![图片下方显示名字](图片url ”鼠标放在图片上的显示信息“)</code></pre><p><strong>示例：</strong></p><pre><code>![图片描述](https://img-blog.csdnimg.cn/20200507103002365.png &quot;显示信息&quot;)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200507103002365.png" alt="图片描述"></p><p><strong>图片描述</strong></p><p>图片的储存上需要用到图床，我使用的是PicGo+Github搭建的免费图床，<br>参考的是压饭大佬的教程<br><a href="https://topking66.gitee.io/go.html?u=aHR0cHM6Ly95YWZpbmUtYmxvZy5jbi9wb3N0cy9lYjNhLmh0bWw=">https://yafine-blog.cn/posts/eb3a.html</a></p><p>(Tips: 我平时经常也把CSDN当成图床,因为CSDN可以上传本地图片,在CSDN写完复制再上传自己的博客也挺舒服的，比如这篇博客就是这样)</p><h3 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6.超链接"></a>6.超链接</h3><pre><code>[网址名](网址)</code></pre><p><strong>实例：</strong></p><pre><code>[百度](https://www.baidu.com/ )[CSDN](https://www.csdn.net/)</code></pre><p><a href="https://topking66.gitee.io/go.html?u=aHR0cHM6Ly93d3cuYmFpZHUuY29tLw==">百度</a><br><a href="https://topking66.gitee.io/go.html?u=aHR0cHM6Ly93d3cuY3Nkbi5uZXQv">CSDN</a></p><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h3><p><strong>无序列表</strong></p><p>在内容前面加上 * , + ,或者 - （注意空格）</p><pre><code>* 无序列表- 无序列表+ 无序列表</code></pre><ul><li><p>无序列表</p></li><li><p>无序列表</p></li><li><p>无序列表</p></li></ul><p><strong>有序列表</strong></p><p>数字加上. (后面还是要空格)</p><pre><code>1. 有序列表2. 有序列表3.  有序列表</code></pre><ol><li><p>有序列表</p></li><li><p>有序列表</p></li><li><p>有序列表</p></li></ol><h3 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h3><pre><code>表头|表头|表头:---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行-左边加：表示文字居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><p><strong>示例：</strong></p><pre><code>姓名|动作|事件:-|:-:|-:小明|去|上学小红|玩|泥巴小军|吃|辣条</code></pre><table><thead><tr><th align="left">姓名</th><th align="left">动作</th><th align="left">事件</th></tr></thead><tbody><tr><td align="left">小明</td><td align="left">去</td><td align="left">上学</td></tr><tr><td align="left">小红</td><td align="left">玩</td><td align="left">泥巴</td></tr><tr><td align="left">小军</td><td align="left">吃</td><td align="left">辣条</td></tr></tbody></table><h3 id="9-代码插入"><a href="#9-代码插入" class="headerlink" title="9.代码插入"></a>9.代码插入</h3><p>单行代码<br>用两个&#96;把代码内容包起来</p><blockquote><pre><code>hello world</code></pre></blockquote><pre><code>hello world</code></pre><p>代码块<br>用 两个&#96;&#96;&#96;把代码块包起来</p><blockquote><p>`&#96;&#96;<br>#include&lt;stdio.h&gt;<br>void main()<br>{<br>printf(“hello world!”);<br>return 0;<br>}<br>`&#96;&#96;</p></blockquote><pre><code>#include&lt;stdio.h&gt;void main()&#123;       printf(&quot;hello world!&quot;);        return 0;&#125;</code></pre><h2 id="markdown进阶"><a href="#markdown进阶" class="headerlink" title="markdown进阶"></a>markdown进阶</h2><h3 id="10-插入视频"><a href="#10-插入视频" class="headerlink" title="10.插入视频"></a>10.插入视频</h3><p>src里面填视频原URL<br>width是视频宽度（可以填百分比）<br>height是视频高度（可以填百分比）</p><pre><code>&lt;iframe     width=100%    height=600px    src=&#39;//player.bilibili.com/player.html?aid=455564468&amp;bvid=BV1H541147nA&amp;cid=187808769&amp;page=1&#39;    frameborder=&quot;0&quot;     allowfullscreen&gt;&lt;/iframe&gt;</code></pre><iframe width="100%" height="600px" src="https://player.bilibili.com/player.html?aid=455564468&amp;bvid=BV1H541147nA&amp;cid=187808769&amp;page=1" frameborder="0" allowfullscreen="" style="box-sizing: inherit; outline: none; margin: 0px; padding: 0px; color: rgb(52, 73, 94); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h3 id="11-插入音乐"><a href="#11-插入音乐" class="headerlink" title="11.插入音乐"></a>11.插入音乐</h3><pre><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1385240480&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;</code></pre><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&amp;id=1385240480&amp;auto=0&amp;height=66" style="box-sizing: inherit; outline: none; margin: 0px; padding: 0px; color: rgb(52, 73, 94); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen-Sans, Ubuntu, Cantarell, &quot;Helvetica Neue&quot;, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"></iframe><h3 id="12-文字缩进"><a href="#12-文字缩进" class="headerlink" title="12.文字缩进"></a>12.文字缩进</h3><p>在要缩进的文字前使用 <code> </code> （注意空格）</p><p><strong>示例</strong><br>这是缩进前的文字<br>  这是缩进后的文字</p><h3 id="13-文字的居中"><a href="#13-文字的居中" class="headerlink" title="13.文字的居中"></a>13.文字的居中</h3><p>对于标准的markdown文本，是不支持居中对齐的。但是markdown支持html语言，所以我们采用html语法格式来实现</p><pre><code>&lt;center&gt;这一行需要居中&lt;/center&gt;</code></pre><p>这一行需要居中</p><h3 id="14-文字的字体和颜色"><a href="#14-文字的字体和颜色" class="headerlink" title="14.文字的字体和颜色"></a>14.文字的字体和颜色</h3><p>同样用html语法来实现</p><p>1.字体更换</p><pre><code>&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</code></pre><p>我是黑体字</p><p>2.字体大小控制</p><pre><code>&lt;font  size=7 &gt;我很大&lt;/font&gt;</code></pre><p>我很大</p><p>3.颜色替换</p><pre><code>&lt;font color=yellow &gt;我是什么颜色？&lt;/font&gt;</code></pre><p>我是什么颜色？</p><p>4.上面的语句可以嵌套使用</p><pre><code>&lt;center&gt;&lt;font face=&quot;微软雅黑&quot; color=blue size=8&gt;我是谁&lt;/font&gt;&lt;/center&gt;</code></pre><p>我是谁</p><h3 id="15-图片的大小和位置"><a href="#15-图片的大小和位置" class="headerlink" title="15.图片的大小和位置"></a>15.图片的大小和位置</h3><p>通过 center 居中 ，把center换成 left 和 right 可以实现居左或者居右<br>width 和 height 调控高度和宽度</p><pre><code>&lt;div  align=&quot;center&quot;&gt;    &lt;img src=&quot;https://img-blog.csdnimg.cn/20200507103002365.png&quot; width = 30% height = 20% /&gt;&lt;/div&gt; </code></pre><p><img src="https://img-blog.csdnimg.cn/20200507103002365.png" alt="img"></p><h2 id="Markdown编辑器推荐"><a href="#Markdown编辑器推荐" class="headerlink" title="Markdown编辑器推荐"></a>Markdown编辑器推荐</h2><p>我正在使用的markdown编辑器是Typora</p><p>关于Typora<br>Typora 是一款简单、高效而且非常优雅的 Markdown 编辑器，它提供了一种所见即所得的全新的 Markdown 写作体验</p><p>Typora 把源码编辑和效果预览两者合二为一，在输入 Markdown 代码的时候即时生成预览效果</p><p>Typora 是目前互联网上最受欢迎的 Markdown 编辑器之一</p><p>下载地址：<a href="https://topking66.gitee.io/go.html?u=aHR0cHM6Ly93d3cudHlwb3JhLmlv">传送门</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
